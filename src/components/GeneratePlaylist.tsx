import to from 'await-to-js';
import React, { useRef } from 'react';
import { useSelector } from 'react-redux';
import SpotifyWebApi from 'spotify-web-api-js';
import { RootState } from '../store/reducers';
import { TrackAttributesEnum } from '../store/trackAttributesSlice';

const GeneratePlaylist: React.FC = () => {
    const spotifyApi = useRef(new SpotifyWebApi());
    const { user } = useSelector((state: RootState) => state.app);
    const artists = useSelector((state: RootState) => state.artists);
    const trackAttributes = useSelector(
        (state: RootState) => state.trackAttributes
    );

    const createPlaylist = async () => {
        if (!user) return;

        const [err, playlist] = await to(
            spotifyApi.current.createPlaylist(user.id, {
                name: 'DiscoverMusic.now demo',
                description: 'Generated by DiscoverMusic.now.',
            })
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        return playlist;
    };

    const addTracksToPlaylist = async (
        playlist: SpotifyApi.CreatePlaylistResponse,
        recommendations: SpotifyApi.RecommendationsFromSeedsResponse
    ) => {
        const [err] = await to(
            spotifyApi.current.addTracksToPlaylist(
                playlist.id,
                recommendations.tracks.map(track => track.uri)
            )
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        } else {
            alert('Check your Spotify, a new playlist is ready!');
        }
    };

    const getRecommendations = async () => {
        if (!artists.length) return;

        const activeTrackAttributes: {
            [key in TrackAttributesEnum]?: number;
        } = {};

        Object.keys(trackAttributes).map(attribute => {
            if (trackAttributes[attribute].active) {
                activeTrackAttributes[attribute] =
                    trackAttributes[attribute].value;
            }
        });

        const [err, recommendations] = await to(
            spotifyApi.current.getRecommendations({
                seed_artists: artists.map(artist => artist.id),
                limit: 50,
                ...activeTrackAttributes,
            })
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        if (recommendations) {
            const playlist = await createPlaylist();

            if (playlist) {
                addTracksToPlaylist(playlist, recommendations);
            }
        }
    };

    return (
        <>
            <h2>Generate playlist</h2>
            <button onClick={getRecommendations}>Generate</button>
        </>
    );
};

export default GeneratePlaylist;
