import to from 'await-to-js';
import queryString from 'query-string';
import React, { useEffect, useRef } from 'react';
import { useForm } from 'react-hook-form';
import { useDispatch, useSelector } from 'react-redux';
import SpotifyWebApi from 'spotify-web-api-js';
import { addArtist, removeArtist, setToken, setUser } from './store/appSlice';
import { RootState } from './store/reducers';

function App() {
    const dispatch = useDispatch();
    const spotifyApi = useRef(new SpotifyWebApi());
    const { token, user, artists } = useSelector(
        (state: RootState) => state.app
    );
    const { register, handleSubmit, errors } = useForm();

    const onSubmit = async (data: any) => {
        const [err, results] = await to(
            spotifyApi.current.search(data.artist, ['artist'])
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        if (results?.artists?.items) {
            dispatch(addArtist(results.artists.items[0]));
        }
    };

    const loginWithSpotify = () => {
        const scopes = 'playlist-modify-public';
        const redirectUrl =
            process.env.NODE_ENV === 'development'
                ? 'https://localhost:3000/'
                : 'https://discovermusic.netlify.app/';

        window.location.replace(
            `https://accounts.spotify.com/authorize?client_id=453ef47ef0c24a63a38a91b855d9c9b3&redirect_uri=${encodeURIComponent(
                redirectUrl
            )}&scope=${encodeURIComponent(scopes)}&response_type=token`
        );
    };

    const createPlaylist = async () => {
        if (!user) return;

        const [err, playlist] = await to(
            spotifyApi.current.createPlaylist(user.id, {
                name: 'DiscoverMusic.now demo',
                description: 'Generated by DiscoverMusic.now.',
            })
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        return playlist;
    };

    const getRecommendations = async () => {
        if (!artists.length) return;

        const [err, recommendations] = await to(
            spotifyApi.current.getRecommendations({
                seed_artists: artists.map(artist => artist.id),
                limit: 50,
            })
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        if (recommendations) {
            const playlist = await createPlaylist();

            if (playlist) {
                spotifyApi.current.addTracksToPlaylist(
                    playlist.id,
                    recommendations.tracks.map(track => track.uri)
                );
            }
        }
    };

    // Save token after first login
    useEffect(() => {
        if (!token && window.location.hash) {
            const parsedHash = queryString.parse(window.location.hash);

            dispatch(setToken(parsedHash.access_token));

            if (parsedHash && parsedHash.access_token) {
                spotifyApi.current.setAccessToken(
                    parsedHash.access_token as string
                );
            }
        }
    }, [dispatch, token]);

    // Set access token after getting token
    // Save user info to Redux
    useEffect(() => {
        const setAccessToken = () => {
            spotifyApi.current.setAccessToken(token);
        };

        const getUser = async () => {
            const [err, user] = await to(spotifyApi.current.getMe());

            if (err) {
                // Clear local data
                window.localStorage.removeItem('persist:root');

                console.error(`Something went wrong: ${err}`);
            }

            if (user) {
                dispatch(setUser(user));
            }
        };

        if (token) {
            setAccessToken();
            getUser();
        }
    }, [dispatch, token]);

    return (
        <div className="App">
            {token && user ? (
                <>
                    <h1>Hi, {user.display_name}!</h1>
                    <p>Add 5 artists to get a personalised playlist.</p>

                    <form
                        onSubmit={handleSubmit(onSubmit)}
                        style={{ marginBottom: 20 }}
                    >
                        <input
                            type="text"
                            placeholder="Artist"
                            name="artist"
                            ref={register({ required: true, maxLength: 80 })}
                        />
                        {errors.artist && 'Artist is required'}

                        <button type="submit">Add artist</button>
                    </form>
                    <button onClick={getRecommendations}>
                        Generate playlist!
                    </button>

                    {artists.length > 0 && (
                        <>
                            <h2>Selected artists</h2>
                            {artists.map((artist, index) => (
                                <div key={artist.id}>
                                    {index + 1}. {artist.name}
                                    <button
                                        onClick={() =>
                                            dispatch(removeArtist(artist.id))
                                        }
                                    >
                                        Remove
                                    </button>
                                </div>
                            ))}
                        </>
                    )}
                </>
            ) : (
                <button onClick={loginWithSpotify}>Login with Spotify</button>
            )}
        </div>
    );
}

export default App;
