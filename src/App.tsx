import to from 'await-to-js';
import queryString from 'query-string';
import React, { useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import SpotifyWebApi from 'spotify-web-api-js';
import { setToken, setUser, setGenres } from './store/appSlice';
import { RootState } from './store/reducers';
import { useForm } from 'react-hook-form';

function App() {
    const dispatch = useDispatch();
    const spotifyApi = useRef(new SpotifyWebApi());
    const { token, user, genres } = useSelector(
        (state: RootState) => state.app
    );
    const { register, handleSubmit, errors } = useForm();

    const onSubmit = async (data: any) => {
        console.log(data);
        let err, results: any, track, trackFeatures, trackAnalysis, artist;

        console.log('data.artist :>> ', data.artist);

        [err, results] = await to(
            spotifyApi.current.search(data.artist, ['artist'])
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        if (results) {
            console.log('results :>> ', results);

            [err, artist] = await to(
                spotifyApi.current.getArtist(
                    results.tracks.items[0].artists[0].id
                )
            );

            [err, track] = await to(
                spotifyApi.current.getTrack(results.tracks.items[0].id)
            );

            [err, trackFeatures] = await to(
                spotifyApi.current.getAudioFeaturesForTrack(
                    results.tracks.items[0].id
                )
            );

            [err, trackAnalysis] = await to(
                spotifyApi.current.getAudioAnalysisForTrack(
                    results.tracks.items[0].id
                )
            );

            console.log('artist :>> ', artist);

            console.log('trackFeatures :>> ', trackFeatures);

            console.log('track :>> ', track);

            console.log('track :>> ', trackAnalysis);
        }
    };

    const loginWithSpotify = () => {
        const scopes = 'playlist-modify-public';
        const redirectUrl =
            process.env.NODE_ENV === 'development'
                ? 'https://localhost:3000/'
                : 'https://discovermusic.netlify.app/';

        window.location.replace(
            `https://accounts.spotify.com/authorize?client_id=453ef47ef0c24a63a38a91b855d9c9b3&redirect_uri=${encodeURIComponent(
                redirectUrl
            )}&scope=${encodeURIComponent(scopes)}&response_type=token`
        );
    };

    const createPlaylist = async () => {
        let err, playlist;

        if (!user) return;

        [err, playlist] = await to(
            spotifyApi.current.createPlaylist(user.id, {
                name: "Floating Points in the 70's",
                description:
                    "Floating Points in the 70's generated by discovermusic.now.",
            })
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        if (playlist) {
            console.log('playlist :>> ', playlist);
        }
    };

    const getRecommendations = async () => {
        let err, recommendations;

        [err, recommendations] = await to(
            spotifyApi.current.getRecommendations({
                seed_artists: [
                    '2AR42Ur9PcchQDtEdwkv4L',
                    '5a0etAzO5V26gvlbmHzT9W',
                    '7Eu1txygG6nJttLHbZdQOh',
                    '5rZVjGkZZI4TnpMHQwrxfG',
                    '15e0X6NuMsVuHi7AZhcfyI',
                ],
            })
        );

        if (err) {
            console.error(`Something went wrong: ${err}`);
        }

        if (recommendations) {
            console.log('recommendations :>> ', recommendations);
        }
    };

    // Save token after first login
    useEffect(() => {
        if (!token && window.location.hash) {
            const parsedHash = queryString.parse(window.location.hash);

            dispatch(setToken(parsedHash.access_token));

            if (parsedHash && parsedHash.access_token) {
                spotifyApi.current.setAccessToken(
                    parsedHash.access_token as string
                );
            }
        }
    }, [dispatch, token]);

    // Set access token after getting token
    // Save user info to Redux
    // Get available genres for recommendations
    useEffect(() => {
        const setAccessToken = () => {
            spotifyApi.current.setAccessToken(token);
        };

        const getUser = async () => {
            let err, user;

            [err, user] = await to(spotifyApi.current.getMe());

            if (err) {
                console.error(`Something went wrong: ${err}`);
            }

            if (user) {
                dispatch(setUser(user));
            }
        };

        const getGenres = async () => {
            let err, genres;

            [err, genres] = await to(
                spotifyApi.current.getAvailableGenreSeeds()
            );

            if (err) {
                console.error(`Something went wrong: ${err}`);
            }

            if (genres) {
                dispatch(setGenres(genres.genres));
            }
        };

        if (token) {
            setAccessToken();
            getUser();
            getGenres();
        }
    }, [dispatch, token]);

    return (
        <div className="App">
            {user ? (
                <>
                    <h1>Hi, {user.display_name}</h1>
                    <button onClick={createPlaylist}>Create playlist</button>
                    {genres && (
                        <select>
                            {genres.map((genre, i) => (
                                <option value={genre} key={i}>
                                    {genre}
                                </option>
                            ))}
                        </select>
                    )}

                    <form onSubmit={handleSubmit(onSubmit)}>
                        <input
                            type="text"
                            placeholder="Artist"
                            name="artist"
                            ref={register({ required: true, maxLength: 80 })}
                        />
                        {errors.artist && 'Artist is required'}

                        <input
                            type="text"
                            placeholder="Track"
                            name="track"
                            ref={register({ required: true, maxLength: 80 })}
                        />
                        {errors.track && 'Track is required'}

                        <input type="submit" />
                    </form>
                    <button onClick={getRecommendations}>
                        Recommendations demo
                    </button>
                </>
            ) : (
                <button onClick={loginWithSpotify}>Login with Spotify</button>
            )}
        </div>
    );
}

export default App;
